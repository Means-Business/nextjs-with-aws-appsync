{"version":3,"file":"4.4c4807f9b570b68a90e6.hot-update.js","sources":["webpack:///pages/index.js"],"sourcesContent":["import gql from 'graphql-tag'\nimport { graphql, compose } from 'react-apollo'\nimport withData from '../withData'\nimport uuidV4 from 'uuid/v4'\n\nconst query = gql`\n  query listTodos {\n    listTodos {\n      items {\n        id\n        name\n        completed\n      }\n    }\n  }\n`\n\nconst mutation = gql`\n  mutation createTodo($id: ID!, $name: String!, $completed: Boolean!) {\n    createTodo(input: {\n      id: $id,\n      name: $name,\n      completed: $completed\n    }) {\n      id\n      name\n      completed\n    }\n  }\n`\n\nconst subscription = gql`\n  subscription onCreateTodo {\n    onCreateTodo {\n      id\n      name\n      completed \n    }\n  }\n`\n\nclass App extends React.Component {\n  state = { todo: '' }\n  componentDidMount() {\n    this.props.subscribeToNewTodos()\n  }\n  createTodo = () => {\n    const todo = {\n      name: this.state.todo,\n      id: uuidV4(),\n      completed: false\n    }\n    this.props.createTodo(todo)\n    this.setState({ todo: '' })\n  }\n  render() {\n    console.log('props: ', this.props)\n    return <div>\n      <p>Hello World</p>\n      <input value={this.state.todo} onChange={e => this.setState({ todo: e.target.value })} />\n      <button onClick={this.createTodo}>Create Todo</button>\n      {\n        this.props.todos.map((todo, index) => (\n          <p key={index}>{todo.name}</p>\n        ))\n      }\n    </div>\n  }\n}\n\nconst AppWithTodos = compose(\n  graphql(mutation, {\n    props: props => ({\n      createTodo: todo => {\n        props.mutate({\n          variables: todo,\n          optimisticResponse: {\n            __typename: 'Mutation',\n            createTodo: { ...todo,  __typename: 'Todo' }\n          },\n          update: (proxy, { data: { createTodo } }) => {\n            const data = proxy.readQuery({ query: query });\n            data.listTodos.items.unshift(createTodo);\n            proxy.writeQuery({ query: query, data });\n          }\n        })\n      }\n    })\n  }),\n  graphql(query, {\n    options: {\n      fetchPolicy: 'cache-and-network'\n    },\n    props: props => ({\n      todos: props.data.listTodos ? props.data.listTodos.items : [],\n      subscribeToNewTodos: params => {\n        props.data.subscribeToMore({\n          document: subscription,\n          updateQuery: (prev, { subscriptionData: { data : { onCreateTodo } } }) => {\n            console.log('onCreateTodo: ', onCreateTodo)\n            return {\n              ...prev,\n              listTodos: {\n                __typename: 'TodoConnection',\n                items: [onCreateTodo, ...prev.listTodos.items.filter(todo => todo.id !== onCreateTodo.id)]\n              }\n            }\n          }\n        })\n      }\n    })\n  })\n)(App)\n\nexport default withData(AppWithTodos)\n\n\n// WEBPACK FOOTER //\n// pages/index.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAYA;AAcA;AACA;AASA;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;;;;;AAIA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;AAXA;AACA;AACA;;;AAUA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;;;;;;;;;;;AA1BA;AACA;AA4BA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAVA;AAYA;AAdA;AAAA;AADA;AAmBA;AACA;AADA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;AAFA;AAOA;AAXA;AAaA;AAhBA;AAAA;AAJA;AACA;AAwBA;AACA;AADA;;;;;;;;;;;;AA7GA;AAYA;AAcA;AAUA;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}